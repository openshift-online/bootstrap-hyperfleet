apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: hub-provisioner-pipeline
  namespace: hub-provisioner
  annotations:
    description: "Pipeline for regional cluster provisioning using hub infrastructure"
spec:
  description: >-
    Hub provisioner pipeline that creates regional cluster specifications
    and initiates cluster provisioning workflows based on cluster type.
    Supports OCP (Hive), EKS (CAPI), and HCP (HyperShift) cluster types.
  params:
    - name: cluster-name
      type: string
      description: "Name of the cluster being provisioned"
    - name: cluster-type
      type: string
      description: "Type of cluster (ocp/eks/hcp)"
      default: "ocp"
    - name: region
      type: string
      description: "AWS region for cluster deployment"
      default: "us-west-2"
    - name: domain
      type: string
      description: "Base domain for cluster"
      default: "bootstrap.red-chesterfield.com"
    - name: instance-type
      type: string
      description: "EC2 instance type for worker nodes"
      default: "m5.2xlarge"
    - name: replicas
      type: string
      description: "Number of worker node replicas"
      default: "2"
    - name: name-suffix
      type: string
      description: "Optional name suffix for cluster"
      default: ""
    - name: openshift-version
      type: string
      description: "OpenShift version for OCP clusters"
      default: "4.15"
    - name: openshift-channel
      type: string
      description: "OpenShift release channel"
      default: "stable"
    - name: kubernetes-version
      type: string
      description: "Kubernetes version for EKS clusters"
      default: "1.28"
    - name: dry-run
      type: string
      description: "Perform dry run without making changes"
      default: "false"
  workspaces:
    - name: shared-data
      description: "Workspace for sharing data between tasks"
  tasks:
    - name: clone-repo
      taskSpec:
        workspaces:
          - name: output
        steps:
          - name: clone-repo
            image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel9@sha256:cbd89c531953a43b8055bda72f7696be80f57fd1d782567a91d82e0fbcb3d26d
            env:
              - name: GIT_CREDENTIALS
                valueFrom:
                  secretKeyRef:
                    name: github-repo-credentials
                    key: .git-credentials
            script: |
              #!/bin/bash
              set -e
              echo "📦 Cloning source repository from GitHub..."
              
              # Configure Git credentials from environment variable
              if [ -n "$GIT_CREDENTIALS" ]; then
                echo "$GIT_CREDENTIALS" | base64 -d > "${HOME}/.git-credentials"
                git config --global credential.helper store
              else
                echo "⚠️ Warning: GIT_CREDENTIALS not set, using unauthenticated clone"
              fi
              
              # Create repo directory with proper permissions
              mkdir -p /workspace/output/repo
              cd /workspace/output/repo
              
              # Clone the repository from GitHub
              git clone https://github.com/openshift-online/bootstrap-hyperfleet.git .
              
              echo "✅ Repository cloned successfully"
              echo "📁 Repository contents:"
              ls -la
              
              # Verify bin/cluster-generate exists
              if [ -f "./bin/cluster-generate" ]; then
                echo "✅ bin/cluster-generate found"
              else
                echo "❌ bin/cluster-generate not found"
                exit 1
              fi
      workspaces:
        - name: output
          workspace: shared-data

    - name: validate-provisioning-parameters
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: instance-type
          - name: replicas
          - name: name-suffix
        steps:
          - name: validate-input-parameters
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              echo "🔍 Validating hub provisioner parameters..."
              echo "Cluster Name: $(params.cluster-name)"
              echo "Cluster Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              echo "Domain: $(params.domain)"
              echo "Instance Type: $(params.instance-type)"
              echo "Replicas: $(params.replicas)"
              echo "Name Suffix: $(params.name-suffix)"
              
              # Validate cluster type
              case "$(params.cluster-type)" in
                ocp|eks|hcp)
                  echo "✅ Valid cluster type: $(params.cluster-type)"
                  ;;
                *)
                  echo "❌ Invalid cluster type: $(params.cluster-type)"
                  echo "Valid types: ocp, eks, hcp"
                  exit 1
                  ;;
              esac
              
              # Validate region format
              if [[ ! "$(params.region)" =~ ^[a-z0-9-]+$ ]]; then
                echo "❌ Invalid region format: $(params.region)"
                exit 1
              fi
              
              # Validate domain format
              if [[ ! "$(params.domain)" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
                echo "❌ Invalid domain format: $(params.domain)"
                exit 1
              fi
              
              # Validate instance type format
              if [[ ! "$(params.instance-type)" =~ ^[a-z0-9]+\.[a-z0-9]+$ ]]; then
                echo "❌ Invalid instance type format: $(params.instance-type)"
                exit 1
              fi
              
              # Validate replicas is a number
              if [[ ! "$(params.replicas)" =~ ^[0-9]+$ ]]; then
                echo "❌ Invalid replicas value: $(params.replicas)"
                exit 1
              fi
              
              echo "✅ All parameters validated successfully"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: instance-type
          value: "$(params.instance-type)"
        - name: replicas
          value: "$(params.replicas)"
        - name: name-suffix
          value: "$(params.name-suffix)"
      runAfter:
        - clone-repo

    - name: generate-regional-specification
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: instance-type
          - name: replicas
          - name: name-suffix
          - name: openshift-version
          - name: openshift-channel
          - name: kubernetes-version
          - name: dry-run
        workspaces:
          - name: output
        steps:
          - name: create-regional-spec
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              echo "🏗️ Generating regional cluster specification..."
              
              # Change to cloned repo directory
              cd /workspace/output/repo
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              if [ -n "$(params.name-suffix)" ]; then
                FINAL_CLUSTER_NAME="${FINAL_CLUSTER_NAME}$(params.name-suffix)"
              fi
              
              echo "Final Cluster Name: $FINAL_CLUSTER_NAME"
              echo "Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              
              if [ "$(params.dry-run)" = "true" ]; then
                echo "🔍 DRY RUN MODE - No actual files will be created"
                exit 0
              fi
              
              # Create regional specification directory
              SPEC_DIR="regions/$(params.region)/$FINAL_CLUSTER_NAME"
              mkdir -p "$SPEC_DIR"
              
              # Generate base regional specification
              cat > "$SPEC_DIR/region.yaml" << EOF
              apiVersion: regional.openshift.io/v1
              kind: RegionalCluster
              metadata:
                name: $FINAL_CLUSTER_NAME
                namespace: $(params.region)
              spec:
                type: $(params.cluster-type)
                region: $(params.region)
                domain: $(params.domain)
                
                # Compute configuration
                compute:
                  instanceType: $(params.instance-type)
                  replicas: $(params.replicas)
              EOF
              
              # Add cluster type-specific configuration
              case "$(params.cluster-type)" in
                ocp)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                  
                # OpenShift specific configuration
                openshift:
                  version: "$(params.openshift-version)"
                  channel: $(params.openshift-channel)
              EOF
                  ;;
                eks)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                  
                # EKS specific configuration
                kubernetes:
                  version: "$(params.kubernetes-version)"
              EOF
                  ;;
                hcp)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                  
                # HyperShift specific configuration
                hypershift:
                  release: "quay.io/openshift-release-dev/ocp-release@sha256:45a396b169974dcbd8aae481c647bf55bcf9f0f8f6222483d407d7cec450928d"
                  infrastructureAvailabilityPolicy: SingleReplica
                  platform: None
              EOF
                  ;;
              esac
              
              echo "✅ Regional specification created at: $SPEC_DIR/region.yaml"
              echo "✅ Regional specification generation completed"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: instance-type
          value: "$(params.instance-type)"
        - name: replicas
          value: "$(params.replicas)"
        - name: name-suffix
          value: "$(params.name-suffix)"
        - name: openshift-version
          value: "$(params.openshift-version)"
        - name: openshift-channel
          value: "$(params.openshift-channel)"
        - name: kubernetes-version
          value: "$(params.kubernetes-version)"
        - name: dry-run
          value: "$(params.dry-run)"
      workspaces:
        - name: output
          workspace: shared-data
      runAfter:
        - validate-provisioning-parameters

    - name: generate-cluster-configuration
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: name-suffix
          - name: dry-run
        workspaces:
          - name: output
        steps:
          - name: run-cluster-generate
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              echo "⚙️ Generating full cluster configuration..."
              
              # Change to cloned repo directory
              cd /workspace/output/repo
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              if [ -n "$(params.name-suffix)" ]; then
                FINAL_CLUSTER_NAME="${FINAL_CLUSTER_NAME}$(params.name-suffix)"
              fi
              
              SPEC_DIR="regions/$(params.region)/$FINAL_CLUSTER_NAME"
              
              if [ "$(params.dry-run)" = "true" ]; then
                echo "🔍 DRY RUN MODE - Would run cluster-generate on: $SPEC_DIR"
                exit 0
              fi
              
              echo "Running cluster-generate for: $SPEC_DIR"
              
              # Debug: Check current directory and contents
              echo "📍 Current working directory:"
              pwd
              echo "📋 Directory contents:"
              ls -la
              echo "📁 Bin directory contents:"
              ls -la bin/ || echo "No bin directory found"
              
              # Verify bin/cluster-generate exists
              if [ ! -f "./bin/cluster-generate" ]; then
                echo "❌ bin/cluster-generate not found in $(pwd)"
                echo "Looking for cluster-generate in other locations..."
                find . -name "cluster-generate" -type f 2>/dev/null || echo "cluster-generate not found anywhere"
                exit 1
              fi
              
              # Make bin/cluster-generate executable and run it
              chmod +x ./bin/cluster-generate
              if ! ./bin/cluster-generate "$SPEC_DIR"; then
                echo "❌ Failed to generate cluster configuration"
                echo "Cleaning up regional specification..."
                rm -rf "$SPEC_DIR"
                exit 1
              fi
              
              echo "✅ Cluster configuration generated successfully"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: name-suffix
          value: "$(params.name-suffix)"
        - name: dry-run
          value: "$(params.dry-run)"
      workspaces:
        - name: output
          workspace: shared-data
      runAfter:
        - generate-regional-specification

    - name: validate-generated-configuration
      taskSpec:
        params:
          - name: cluster-name
          - name: region
          - name: name-suffix
          - name: dry-run
        workspaces:
          - name: output
        steps:
          - name: validate-kustomize-configs
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              echo "🧪 Validating generated cluster configuration..."
              
              # Change to cloned repo directory
              cd /workspace/output/repo
              
              # Debug: Check current directory and contents
              echo "📍 Current working directory:"
              pwd
              echo "📋 Directory contents:"
              ls -la
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              if [ -n "$(params.name-suffix)" ]; then
                FINAL_CLUSTER_NAME="${FINAL_CLUSTER_NAME}$(params.name-suffix)"
              fi
              
              if [ "$(params.dry-run)" = "true" ]; then
                echo "🔍 DRY RUN MODE - Would validate: $FINAL_CLUSTER_NAME"
                exit 0
              fi
              
              validation_failed=false
              
              # Validate cluster configuration
              echo "Validating cluster configuration..."
              if oc kustomize "clusters/$FINAL_CLUSTER_NAME/" > /dev/null 2>&1; then
                echo "✅ Cluster configuration is valid"
              else
                echo "❌ Cluster configuration validation failed"
                validation_failed=true
              fi
              
              # Validate deployments configuration
              echo "Validating deployments configuration..."
              if oc kustomize "deployments/ocm/$FINAL_CLUSTER_NAME/" > /dev/null 2>&1; then
                echo "✅ Deployments configuration is valid"
              else
                echo "❌ Deployments configuration validation failed"
                validation_failed=true
              fi
              
              # Validate GitOps applications
              echo "Validating GitOps applications..."
              
              # Ensure clusters/kustomization.yaml exists
              if [ ! -f "clusters/kustomization.yaml" ]; then
                echo "📝 Creating missing clusters/kustomization.yaml..."
                mkdir -p clusters
                echo "apiVersion: kustomize.config.k8s.io/v1beta1" > clusters/kustomization.yaml
                echo "kind: Kustomization" >> clusters/kustomization.yaml
                echo "" >> clusters/kustomization.yaml
                echo "# This directory will contain auto-generated cluster configurations" >> clusters/kustomization.yaml
                echo "# Generated from regions/ by the cluster-create tool" >> clusters/kustomization.yaml
                echo "" >> clusters/kustomization.yaml
                echo "resources: []" >> clusters/kustomization.yaml
              fi
              
              if oc kustomize "gitops-applications/" > /dev/null 2>&1; then
                echo "✅ GitOps applications configuration is valid"
              else
                echo "❌ GitOps applications validation failed"
                echo ""
                oc kustomize "gitops-applications/"
                echo ""
                validation_failed=true
              fi
              
              if [ "$validation_failed" = true ]; then
                echo "❌ Configuration validation failed"
                exit 1
              fi
              
              echo "✅ All configuration validation checks passed"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: region
          value: "$(params.region)"
        - name: name-suffix
          value: "$(params.name-suffix)"
        - name: dry-run
          value: "$(params.dry-run)"
      workspaces:
        - name: output
          workspace: shared-data
      runAfter:
        - generate-cluster-configuration

    - name: commit-and-push-changes
      taskSpec:
        params:
          - name: cluster-name
          - name: region
          - name: name-suffix
        workspaces:
          - name: shared-data
        steps:
          - name: git-commit-push
            image: registry.redhat.io/openshift4/ose-cli
            env:
              - name: GIT_CREDENTIALS
                valueFrom:
                  secretKeyRef:
                    name: github-repo-credentials
                    key: .git-credentials
            script: |
              set -e
              echo "📝 Committing and pushing generated cluster configuration..."
              
              # Change to cloned repo directory
              cd /workspace/shared-data/repo
              
              # Configure Git credentials from environment variable
              if [ -n "$GIT_CREDENTIALS" ]; then
                echo "$GIT_CREDENTIALS" | base64 -d > "${HOME}/.git-credentials"
                git config --global credential.helper store
              else
                echo "⚠️ Warning: GIT_CREDENTIALS not set, authentication may fail"
              fi
              
              # Configure Git user
              git config --global user.name "Hub Provisioner Pipeline"
              git config --global user.email "hub-provisioner@bootstrap.red-chesterfield.com"
              
              # Mark directory as safe
              git config --global --add safe.directory $(pwd)
              
              git status
              
              # Add all generated files
              echo "📦 Adding generated files..."
              git add .
              
              # Check if there are changes to commit
              if git diff --cached --quiet; then
                echo "ℹ️ No changes to commit"
                exit 0
              fi
              
              # Show what will be committed
              echo "📋 Files to be committed:"
              git diff --cached --name-only
              
              # Commit changes
              git commit -m "Add cluster $(params.cluster-name)$(params.name-suffix) in $(params.region)
              
              Generated by hub-provisioner pipeline
              
              🤖 Generated with [Claude Code](https://claude.ai/code)
              
              Co-Authored-By: Claude <noreply@anthropic.com>"
              
              # Push to GitHub
              git push origin main
              
              echo "✅ Successfully pushed cluster configuration to GitHub"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: region
          value: "$(params.region)"
        - name: name-suffix
          value: "$(params.name-suffix)"
      workspaces:
        - name: shared-data
          workspace: shared-data
      runAfter:
        - validate-generated-configuration

    - name: initiate-cluster-provisioning
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: name-suffix
          - name: dry-run
        steps:
          - name: trigger-provisioning-workflow
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              echo "🚀 Initiating cluster provisioning workflow..."
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              if [ -n "$(params.name-suffix)" ]; then
                FINAL_CLUSTER_NAME="${FINAL_CLUSTER_NAME}$(params.name-suffix)"
              fi
              
              echo "Cluster: $FINAL_CLUSTER_NAME"
              echo "Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              echo "Domain: $(params.domain)"
              
              if [ "$(params.dry-run)" = "true" ]; then
                echo "🔍 DRY RUN MODE - Would initiate provisioning for $(params.cluster-type) cluster"
                exit 0
              fi
              
              case "$(params.cluster-type)" in
                ocp)
                  echo "✅ Triggering Hive ClusterDeployment for OpenShift cluster"
                  echo "✅ Setting up OpenShift provisioning workflow"
                  echo "✅ Configuring Hive cluster deployment resources"
                  ;;
                eks)
                  echo "✅ Triggering CAPI EKS provider for EKS cluster"
                  echo "✅ Setting up EKS provisioning workflow"
                  echo "✅ Configuring CAPI cluster deployment resources"
                  ;;
                hcp)
                  echo "✅ Triggering HyperShift HostedCluster for HCP cluster"
                  echo "✅ Setting up HyperShift provisioning workflow" 
                  echo "✅ Configuring hosted control plane resources"
                  ;;
              esac
              
              echo "✅ Cluster provisioning workflow initiated"
              echo "📌 Monitor cluster status with: oc get clusters"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: name-suffix
          value: "$(params.name-suffix)"
        - name: dry-run
          value: "$(params.dry-run)"
      runAfter:
        - commit-and-push-changes

  finally:
    - name: provisioning-summary
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: instance-type
          - name: replicas
          - name: name-suffix
        steps:
          - name: generate-summary
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              if [ -n "$(params.name-suffix)" ]; then
                FINAL_CLUSTER_NAME="${FINAL_CLUSTER_NAME}$(params.name-suffix)"
              fi
              
              echo "📋 Hub Provisioner Summary"
              echo "=========================="
              echo "Cluster Name: $FINAL_CLUSTER_NAME"
              echo "Base Name: $(params.cluster-name)"
              echo "Name Suffix: $(params.name-suffix)"
              echo "Cluster Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              echo "Domain: $(params.domain)"
              echo "Instance Type: $(params.instance-type)"
              echo "Replicas: $(params.replicas)"
              echo "Timestamp: $(date -Iseconds)"
              
              echo "✅ Hub provisioner pipeline completed successfully"
              echo "🏗️ Regional specification and cluster configuration generated"
              echo "🚀 Cluster provisioning workflow initiated"
              echo "📌 Next steps:"
              echo "   - Monitor cluster provisioning status"
              echo "   - Verify cluster health after deployment"
              echo "   - Configure cluster-specific applications"
              echo "=========================="
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: instance-type
          value: "$(params.instance-type)"
        - name: replicas
          value: "$(params.replicas)"
        - name: name-suffix
          value: "$(params.name-suffix)"