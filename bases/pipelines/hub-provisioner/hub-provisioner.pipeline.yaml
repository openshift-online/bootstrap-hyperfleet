apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: hub-provisioner-pipeline
  namespace: hub-provisioner
  annotations:
    description: "Pipeline for regional cluster provisioning using hub infrastructure"
spec:
  description: >-
    Hub provisioner pipeline that creates regional cluster specifications
    and initiates cluster provisioning workflows based on cluster type.
    Supports OCP (Hive), EKS (CAPI), and HCP (HyperShift) cluster types.
  params:
    - name: cluster-name
      type: string
      description: "Name of the cluster being provisioned"
    - name: cluster-type
      type: string
      description: "Type of cluster (ocp/eks/hcp)"
      default: "ocp"
    - name: region
      type: string
      description: "AWS region for cluster deployment"
      default: "us-west-2"
    - name: domain
      type: string
      description: "Base domain for cluster"
      default: "bootstrap.red-chesterfield.com"
    - name: instance-type
      type: string
      description: "EC2 instance type for worker nodes"
      default: "m5.2xlarge"
    - name: replicas
      type: string
      description: "Number of worker node replicas"
      default: "2"
    - name: openshift-version
      type: string
      description: "OpenShift version for OCP clusters"
      default: "4.15"
    - name: openshift-channel
      type: string
      description: "OpenShift release channel"
      default: "stable"
    - name: kubernetes-version
      type: string
      description: "Kubernetes version for EKS clusters"
      default: "1.28"
    - name: dry-run
      type: string
      description: "Perform dry run without making changes"
      default: "false"
  tasks:
    - name: test-github-auth
      taskSpec:
        steps:
          - name: test-auth
            image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel9@sha256:cbd89c531953a43b8055bda72f7696be80f57fd1d782567a91d82e0fbcb3d26d
            env:
              - name: SSH_PRIVATE_KEY
                valueFrom:
                  secretKeyRef:
                    name: github-repo-credentials
                    key: ssh-privatekey
            script: |
              #!/bin/bash
              set -e
              
              echo "🔐 Testing GitHub SSH authentication and write access..."
              
              # Setup SSH directory and key
              mkdir -p "${HOME}/.ssh"
              chmod 700 "${HOME}/.ssh"
              
              echo "$SSH_PRIVATE_KEY" > "${HOME}/.ssh/id_ed25519"
              chmod 600 "${HOME}/.ssh/id_ed25519"
              
              # Add GitHub to known hosts
              ssh-keyscan github.com >> "${HOME}/.ssh/known_hosts" 2>/dev/null
              
              echo "✅ SSH key configured"
              
              git config --global user.name "Hub Provisioner Pipeline"
              git config --global user.email "hub-provisioner@bootstrap.red-chesterfield.com"
              
              # Clone to test read access
              echo "📦 Testing read access..."
              WORK_DIR=$(mktemp -d)
              cd "$WORK_DIR"
              
              if GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
                 git clone git@github.com:openshift-online/bootstrap-hyperfleet.git .; then
                echo "✅ Read access confirmed"
              else
                echo "❌ Failed to clone repository"
                exit 1
              fi
              
              # Create a test branch to verify write access
              echo "🔍 Testing write access..."
              git checkout -b "test-auth-$(date +%s)"
              
              # Create a test file in the repo
              echo "test" > test-file.txt
              git add test-file.txt
              
              # Test if we can push to a test branch
              # We use --dry-run to not actually create the branch
              if GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
                 git push --dry-run origin HEAD 2>&1 | tee /tmp/push-test.log; then
                echo "✅ Write access confirmed (dry-run successful)"
              else
                echo "❌ Write access denied"
                echo "Push dry-run output:"
                cat /tmp/push-test.log
                exit 1
              fi
              
              echo "✅ GitHub SSH authentication test completed successfully"

    - name: provision-cluster
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: instance-type
          - name: replicas
          - name: openshift-version
          - name: openshift-channel
          - name: kubernetes-version
          - name: dry-run
        steps:
          - name: provision
            image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel9@sha256:cbd89c531953a43b8055bda72f7696be80f57fd1d782567a91d82e0fbcb3d26d
            env:
              - name: SSH_PRIVATE_KEY
                valueFrom:
                  secretKeyRef:
                    name: github-repo-credentials
                    key: ssh-privatekey
            script: |
              #!/bin/bash
              set -e
              
              echo "🚀 Starting cluster provisioning workflow..."
              echo "Cluster: $(params.cluster-name)"
              echo "Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              
              # Setup SSH directory and key
              mkdir -p "${HOME}/.ssh"
              chmod 700 "${HOME}/.ssh"
              
              echo "$SSH_PRIVATE_KEY" > "${HOME}/.ssh/id_ed25519"
              chmod 600 "${HOME}/.ssh/id_ed25519"
              
              # Add GitHub to known hosts
              ssh-keyscan github.com >> "${HOME}/.ssh/known_hosts" 2>/dev/null
              
              git config --global user.name "Hub Provisioner Pipeline"
              git config --global user.email "hub-provisioner@bootstrap.red-chesterfield.com"
              
              echo "✅ SSH key configured"
              
              # Clone repository
              echo "📦 Cloning repository..."
              WORK_DIR=$(mktemp -d)
              cd "$WORK_DIR"
              GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
                git clone git@github.com:openshift-online/bootstrap-hyperfleet.git .
              
              # Validate cluster parameters
              echo "🔍 Validating parameters..."
              case "$(params.cluster-type)" in
                ocp|eks|hcp)
                  echo "✅ Valid cluster type: $(params.cluster-type)"
                  ;;
                *)
                  echo "❌ Invalid cluster type: $(params.cluster-type)"
                  exit 1
                  ;;
              esac
              
              FINAL_CLUSTER_NAME="$(params.cluster-name)"
              SPEC_DIR="regions/$(params.region)/$FINAL_CLUSTER_NAME"
              
              if [ "$(params.dry-run)" = "true" ]; then
                echo "🔍 DRY RUN MODE - Would provision: $FINAL_CLUSTER_NAME"
                exit 0
              fi
              
              # Create regional specification
              echo "🏗️ Generating regional specification..."
              mkdir -p "$SPEC_DIR"
              
              cat > "$SPEC_DIR/region.yaml" << EOF
              apiVersion: regional.openshift.io/v1
              kind: RegionalCluster
              metadata:
                name: $FINAL_CLUSTER_NAME
                namespace: $(params.region)
              spec:
                type: $(params.cluster-type)
                region: $(params.region)
                domain: $(params.domain)
                
                compute:
                  instanceType: $(params.instance-type)
                  replicas: $(params.replicas)
              EOF
              
              # Add cluster type-specific configuration
              case "$(params.cluster-type)" in
                ocp)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                
                openshift:
                  version: "$(params.openshift-version)"
                  channel: $(params.openshift-channel)
              EOF
                  ;;
                eks)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                
                kubernetes:
                  version: "$(params.kubernetes-version)"
              EOF
                  ;;
                hcp)
                  cat >> "$SPEC_DIR/region.yaml" << EOF
                
                hypershift:
                  release: "quay.io/openshift-release-dev/ocp-release@sha256:45a396b169974dcbd8aae481c647bf55bcf9f0f8f6222483d407d7cec450928d"
                  infrastructureAvailabilityPolicy: SingleReplica
                  platform: None
              EOF
                  ;;
              esac
              
              echo "✅ Regional specification created"
              
              # Run cluster-generate
              echo "⚙️ Running cluster-generate..."
              if [ ! -f "./bin/cluster-generate" ]; then
                echo "❌ bin/cluster-generate not found"
                exit 1
              fi
              
              chmod +x ./bin/cluster-generate
              if ! ./bin/cluster-generate "$SPEC_DIR"; then
                echo "❌ Failed to generate cluster configuration"
                rm -rf "$SPEC_DIR"
                exit 1
              fi
              
              echo "✅ Cluster configuration generated"
              
              # Basic validation - check files exist
              echo "🧪 Validating configuration..."
              
              if [ -d "clusters/$FINAL_CLUSTER_NAME/" ]; then
                echo "✅ Cluster directory created"
              else
                echo "❌ Cluster directory not found"
                exit 1
              fi
              
              if [ -f "clusters/$FINAL_CLUSTER_NAME/kustomization.yaml" ]; then
                echo "✅ Cluster kustomization.yaml exists"
              else
                echo "❌ Cluster kustomization.yaml not found"
                exit 1
              fi
              
              # Commit and push changes
              echo "📝 Committing changes..."
              git add .
              
              if git diff --cached --quiet; then
                echo "ℹ️ No changes to commit"
                exit 0
              fi
              
              git commit -m "Add cluster $(params.cluster-name) in $(params.region)
              
              Generated by hub-provisioner pipeline
              
              🤖 Generated with [Claude Code](https://claude.ai/code)
              
              Co-Authored-By: Claude <noreply@anthropic.com>"
              
              GIT_SSH_COMMAND="ssh -i ${HOME}/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
                git push origin main
              
              echo "✅ Cluster provisioning completed successfully"
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: instance-type
          value: "$(params.instance-type)"
        - name: replicas
          value: "$(params.replicas)"
        - name: openshift-version
          value: "$(params.openshift-version)"
        - name: openshift-channel
          value: "$(params.openshift-channel)"
        - name: kubernetes-version
          value: "$(params.kubernetes-version)"
        - name: dry-run
          value: "$(params.dry-run)"
      runAfter:
        - test-github-auth

  finally:
    - name: provisioning-summary
      taskSpec:
        params:
          - name: cluster-name
          - name: cluster-type
          - name: region
          - name: domain
          - name: instance-type
          - name: replicas
          
        steps:
          - name: generate-summary
            image: registry.redhat.io/openshift4/ose-cli
            script: |
              #!/usr/bin/env bash
              set -e
              
              # Determine final cluster name
              FINAL_CLUSTER_NAME="$(params.cluster-name)"

              
              echo "📋 Hub Provisioner Summary"
              echo "=========================="
              echo "Cluster Name: $FINAL_CLUSTER_NAME"
              echo "Base Name: $(params.cluster-name)"
              
              echo "Cluster Type: $(params.cluster-type)"
              echo "Region: $(params.region)"
              echo "Domain: $(params.domain)"
              echo "Instance Type: $(params.instance-type)"
              echo "Replicas: $(params.replicas)"
              echo "Timestamp: $(date -Iseconds)"
              
              echo "✅ Hub provisioner pipeline completed successfully"
              echo "🏗️ Regional specification and cluster configuration generated"
              echo "🚀 Cluster provisioning workflow initiated"
              echo "📌 Next steps:"
              echo "   - Monitor cluster provisioning status"
              echo "   - Verify cluster health after deployment"
              echo "   - Configure cluster-specific applications"
              echo "=========================="
      params:
        - name: cluster-name
          value: "$(params.cluster-name)"
        - name: cluster-type
          value: "$(params.cluster-type)"
        - name: region
          value: "$(params.region)"
        - name: domain
          value: "$(params.domain)"
        - name: instance-type
          value: "$(params.instance-type)"
        - name: replicas
          value: "$(params.replicas)"
