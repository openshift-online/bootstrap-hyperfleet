#!/bin/bash
set -e

# Interactive CLI tool for generating new regional cluster specs
# This tool gathers input from the user and generates a complete cluster configuration

echo "OpenShift Regional Cluster Generator"
echo "==================================="
echo ""

# Function to prompt for input with default value
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " input
        if [ -z "$input" ]; then
            input="$default"
        fi
    else
        read -p "$prompt: " input
        while [ -z "$input" ]; do
            echo "This field is required."
            read -p "$prompt: " input
        done
    fi
    
    eval "$var_name=\"$input\""
}

# Function to validate cluster type
validate_cluster_type() {
    local type="$1"
    if [ "$type" != "ocp" ] && [ "$type" != "eks" ] && [ "$type" != "hcp" ]; then
        echo "Error: Cluster type must be 'ocp', 'eks', or 'hcp'" >&2
        return 1
    fi
    return 0
}

# Function to generate next available cluster name with semantic naming
generate_cluster_name() {
    local type="$1"
    local max_num=0
    
    # Check existing clusters directories
    if [ -d "clusters" ]; then
        for cluster_dir in clusters/${type}-*; do
            if [ -d "$cluster_dir" ]; then
                # Extract number from cluster name (e.g., ocp-01 -> 01)
                local cluster_name=$(basename "$cluster_dir")
                local num=$(echo "$cluster_name" | sed "s/${type}-//")
                if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -gt "$max_num" ]; then
                    max_num=$num
                fi
            fi
        done
    fi
    
    # Check existing regions directories
    if [ -d "regions" ]; then
        for region_dir in regions/*/${type}-*; do
            if [ -d "$region_dir" ]; then
                # Extract number from cluster name (e.g., ocp-01 -> 01)
                local cluster_name=$(basename "$region_dir")
                local num=$(echo "$cluster_name" | sed "s/${type}-//")
                if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -gt "$max_num" ]; then
                    max_num=$num
                fi
            fi
        done
    fi
    
    # Check existing GitOps applications
    if [ -d "gitops-applications/clusters" ]; then
        for app_file in gitops-applications/clusters/${type}-*.yaml; do
            if [ -f "$app_file" ]; then
                # Extract number from application name (e.g., ocp-01.yaml -> 01)
                local app_name=$(basename "$app_file" .yaml)
                local num=$(echo "$app_name" | sed "s/${type}-//")
                if [[ "$num" =~ ^[0-9]+$ ]] && [ "$num" -gt "$max_num" ]; then
                    max_num=$num
                fi
            fi
        done
    fi
    
    # Generate next number with zero padding
    local next_num=$((max_num + 1))
    printf "${type}-%02d" "$next_num"
}

# Function to validate cluster name length and format
validate_cluster_name_format() {
    local name="$1"
    
    # Validate cluster name length for Kubernetes label compatibility
    # ApplicationSet generates names like: {cluster-name}-{component}
    # Longest component is "pipelines-cloud-infrastructure-provisioning" (43 chars)
    # Kubernetes labels max length is 63 chars
    # Max cluster name = 63 - 43 - 1 (hyphen) = 19 characters
    local max_length=19
    if [ ${#name} -gt $max_length ]; then
        echo "Error: Cluster name '$name' is ${#name} characters long" >&2
        echo "Maximum allowed length is $max_length characters to avoid Kubernetes label length violations" >&2
        echo "Generated ApplicationSet names like '$name-pipelines-cloud-infrastructure-provisioning' would exceed 63 character limit" >&2
        return 1
    fi
    
    # Validate cluster name format (alphanumeric, hyphens, must start/end with alphanumeric)
    if ! echo "$name" | grep -q '^[a-z0-9][a-z0-9-]*[a-z0-9]$\|^[a-z0-9]$'; then
        echo "Error: Cluster name '$name' contains invalid characters" >&2
        echo "Cluster names must contain only lowercase letters, numbers, and hyphens" >&2
        echo "Must start and end with an alphanumeric character" >&2
        return 1
    fi
    
    return 0
}

# Function to validate cluster name uniqueness
validate_cluster_name() {
    local name="$1"
    
    # First validate name format and length
    if ! validate_cluster_name_format "$name"; then
        return 1
    fi
    
    # Check if cluster directory already exists
    if [ -d "clusters/$name" ]; then
        echo "Error: Cluster '$name' already exists in clusters/" >&2
        return 1
    fi
    
    # Check if regional spec already exists
    if find regions -name "$name" -type d 2>/dev/null | grep -q .; then
        echo "Error: Regional specification for cluster '$name' already exists" >&2
        return 1
    fi
    
    # Check if gitops application already exists
    if [ -f "gitops-applications/clusters/$name.yaml" ]; then
        echo "Error: GitOps application for cluster '$name' already exists" >&2
        return 1
    fi
    
    return 0
}

# Gather input from user
echo "Please provide the following information for your new cluster:"
echo ""

# Get cluster type first (required for name generation)
while true; do
    prompt_with_default "Cluster Type (ocp/eks/hcp)" "ocp" "CLUSTER_TYPE"
    if validate_cluster_type "$CLUSTER_TYPE"; then
        break
    fi
done

# Get cluster name
echo ""
SUGGESTED_NAME=$(generate_cluster_name "$CLUSTER_TYPE")
echo "Suggested cluster name: $SUGGESTED_NAME"
while true; do
    prompt_with_default "Cluster Name" "$SUGGESTED_NAME" "CLUSTER_NAME"
    if validate_cluster_name "$CLUSTER_NAME"; then
        break
    else
        echo "Please choose a different name."
    fi
done

# Get other cluster configuration
prompt_with_default "Region" "us-west-2" "REGION"
prompt_with_default "Base Domain" "bootstrap.red-chesterfield.com" "DOMAIN"
prompt_with_default "Instance Type" "m5.2xlarge" "INSTANCE_TYPE"
prompt_with_default "Number of Replicas" "2" "REPLICAS"

# Show configuration summary
echo ""
echo "Configuration Summary:"
echo "====================="
echo "Cluster Name: $CLUSTER_NAME"
echo "Type: $CLUSTER_TYPE"
echo "Region: $REGION"
echo "Domain: $DOMAIN"
echo "Instance Type: $INSTANCE_TYPE"
echo "Replicas: $REPLICAS"
echo ""

# Confirm before proceeding
read -p "Proceed with cluster generation? (y/N): " confirm
if [ "$confirm" != "y" ] && [ "$confirm" != "Y" ]; then
    echo "Cancelled."
    exit 0
fi

# Create regional specification directory
SPEC_DIR="regions/$REGION/$CLUSTER_NAME"
mkdir -p "$SPEC_DIR"

# Generate regional specification
cat > "$SPEC_DIR/region.yaml" << EOF
apiVersion: regional.openshift.io/v1
kind: RegionalCluster
metadata:
  name: $CLUSTER_NAME
  namespace: $REGION
spec:
  type: $CLUSTER_TYPE
  region: $REGION
  domain: $DOMAIN
  
  # Minimal compute config
  compute:
    instanceType: $INSTANCE_TYPE
    replicas: $REPLICAS
EOF

# Add type-specific configuration
if [ "$CLUSTER_TYPE" = "ocp" ]; then
    cat >> "$SPEC_DIR/region.yaml" << EOF
    
  # Type-specific configuration
  openshift:
    version: "4.15"
    channel: stable
EOF
elif [ "$CLUSTER_TYPE" = "eks" ]; then
    cat >> "$SPEC_DIR/region.yaml" << EOF
    
  # Type-specific configuration
  kubernetes:
    version: "1.28"
EOF
elif [ "$CLUSTER_TYPE" = "hcp" ]; then
    cat >> "$SPEC_DIR/region.yaml" << EOF
    
  # HyperShift specific configuration
  hypershift:
    release: "quay.io/openshift-release-dev/ocp-release@sha256:45a396b169974dcbd8aae481c647bf55bcf9f0f8f6222483d407d7cec450928d"
    infrastructureAvailabilityPolicy: SingleReplica
    platform: None
EOF
fi

echo ""
echo "Generated regional specification at: $SPEC_DIR/region.yaml"

# Run cluster-generate to create full cluster configuration
echo "Running bin/cluster-generate to create cluster configuration..."
echo ""

if ! ./bin/cluster-generate "$SPEC_DIR"; then
    echo "Error: Failed to generate cluster configuration" >&2
    echo "Cleaning up regional specification..."
    rm -rf "$SPEC_DIR"
    exit 1
fi

echo ""
echo "üéâ Cluster generation completed successfully!"
echo ""

# Run validation checks
echo "Validating generated configuration..."
echo ""

validation_failed=false

# Validate cluster configuration
echo "Validating cluster configuration..."
if oc kustomize "clusters/$CLUSTER_NAME/" > /dev/null 2>&1; then
    echo "‚úÖ Cluster configuration is valid"
else
    echo "‚ùå Cluster configuration validation failed"
    echo "Debug: oc kustomize clusters/$CLUSTER_NAME/"
    validation_failed=true
fi

# Validate deployments configuration
echo "Validating deployments configuration..."
if oc kustomize "deployments/ocm/$CLUSTER_NAME/" > /dev/null 2>&1; then
    echo "‚úÖ Deployments configuration is valid"
else
    echo "‚ùå Deployments configuration validation failed"
    echo "Debug: oc kustomize deployments/ocm/$CLUSTER_NAME/"
    validation_failed=true
fi

# Validate GitOps applications
echo "Validating GitOps applications..."
if oc kustomize "gitops-applications/" > /dev/null 2>&1; then
    echo "‚úÖ GitOps applications configuration is valid"
else
    echo "‚ùå GitOps applications validation failed"
    echo "Debug: oc kustomize gitops-applications/"
    validation_failed=true
fi

echo ""
if [ "$validation_failed" = true ]; then
    echo "‚ö†Ô∏è  Some validation checks failed. Please review the debug commands above."
    echo ""
else
    echo "‚úÖ All validation checks passed!"
    echo ""
fi

# List generated files
echo "Generated files:"
echo "=================="
echo "Regional specification:"
echo "  $SPEC_DIR/region.yaml"
echo ""
echo "Cluster files:"
if [ -d "clusters/$CLUSTER_NAME" ]; then
    ls -la "clusters/$CLUSTER_NAME/"
else
    echo "  (Not generated - check errors above)"
fi
echo ""
echo "Operators files:"
if [ -d "operators/openshift-pipelines/$CLUSTER_NAME" ]; then
    ls -la "operators/openshift-pipelines/$CLUSTER_NAME/"
else
    echo "  (Not generated - check errors above)"
fi
echo ""
echo "Pipeline files:"
if [ -d "pipelines/cloud-infrastructure-provisioning/$CLUSTER_NAME" ]; then
    echo "Cloud Infrastructure pipeline:"
    ls -la "pipelines/cloud-infrastructure-provisioning/$CLUSTER_NAME/"
    echo ""
fi
echo "Deployments files:"
if [ -d "deployments/ocm/$CLUSTER_NAME" ]; then
    ls -la "deployments/ocm/$CLUSTER_NAME/"
else
    echo "  (Not generated - check errors above)"
fi
echo ""
echo "GitOps ApplicationSet:"
if [ -f "gitops-applications/clusters/$CLUSTER_NAME.yaml" ]; then
    ls -la "gitops-applications/clusters/$CLUSTER_NAME.yaml"
else
    echo "  (Not generated - check errors above)"
fi
echo ""
echo "Updated gitops-applications/kustomization.yaml"
echo ""

# Next steps
echo "Next steps:"
echo "==========="
echo "1. Review generated configuration files"
echo "2. Commit changes: git add . && git commit -m 'Add $CLUSTER_NAME cluster configuration'"
echo "3. Deploy cluster: ./bootstrap.sh"
echo ""
echo "Configuration complete! ‚ú®"